////Задание 1
////Создайте приложение калькулятор для перевода числа
////из одной системы исчисления в другую. Пользователь с помощью меню выбирает направление перевода. Например,
////из десятичной в двоичную. После выбора направления,
////пользователь вводит число в исходной системе исчисления.
////Приложение должно перевести число в требуемую систему. Предусмотреть случай выхода за границы диапазона,
////определяемого типом int, неправильный ввод.
//using System;

//class Program
//{
//    static void Main()
//    {
//        while (true)
//        {
//            Console.WriteLine("Choose a conversion direction:");
//            Console.WriteLine("1. Decimal to Binary");
//            Console.WriteLine("2. Binary to Decimal");
//            Console.WriteLine("3. Exit");

//            int choice;
//            if (!int.TryParse(Console.ReadLine(), out choice))
//            {
//                Console.WriteLine("Invalid inputenter a valid option.");
//                continue;
//            }

//            switch (choice)
//            {
//                case 1:
//                    ConvertDecimalToBinary();
//                    break;
//                case 2:
//                    ConvertBinaryToDecimal();
//                    break;
//                case 3:
//                    return;
//                default:
//                    Console.WriteLine("Invalid choice select a valid option.");
//                    break;
//            }
//        }
//    }

//    static void ConvertDecimalToBinary()
//    {
//        Console.Write("Enter a decimal number: ");
//        if (!int.TryParse(Console.ReadLine(), out int decimalNumber))
//        {
//            Console.WriteLine("Invalid input enter a valid integer.");
//            return;
//        }

//        string binary = Convert.ToString(decimalNumber, 2);
//        Console.WriteLine($"Binary represent: {binary}");
//    }

//    static void ConvertBinaryToDecimal()
//    {
//        Console.Write("Enter a binary number: ");
//        string binaryNumber = Console.ReadLine();

//        if (!IsBinaryString(binaryNumber))
//        {
//            Console.WriteLine("Invalid input enter a valid  number (0s and 1s).");
//            return;
//        }

//        try
//        {
//            int decimalNumber = Convert.ToInt32(binaryNumber, 2);
//            Console.WriteLine($"Decimal represen: {decimalNumber}");
//        }
//        catch (OverflowException)
//        {
//            Console.WriteLine("error: The binary number is too large to be converted to decimal.");
//        }
//    }

//    static bool IsBinaryString(string input)
//    {
//        foreach (char c in input)
//        {
//            if (c != '0' && c != '1')
//                return false;
//        }
//        return true;
//    }
//}














////Задание 2
////Пользователь вводит словами цифру от 0 до 9. Приложение должно перевести слово в цифру. Например, если
////пользователь ввёл five, приложение должно вывести на
////экран 5. 

//using System;

//class Program
//{
//    static void Main()
//    {
//        Console.Write("Enter a word (zero to nine): ");
//        string inputWord = Console.ReadLine().ToLower();

//        int digit;

//        switch (inputWord)
//        {
//            case "zero":
//                digit = 0;
//                break;
//            case "one":
//                digit = 1;
//                break;
//            case "two":
//                digit = 2;
//                break;
//            case "three":
//                digit = 3;
//                break;
//            case "four":
//                digit = 4;
//                break;
//            case "five":
//                digit = 5;
//                break;
//            case "six":
//                digit = 6;
//                break;
//            case "seven":
//                digit = 7;
//                break;
//            case "eight":
//                digit = 8;
//                break;
//            case "nine":
//                digit = 9;
//                break;
//            default:
//                Console.WriteLine("Invalid input enter a valid word from zero to nine.");
//                return;
//        }

//        Console.WriteLine($"Diigit: {digit}");
//    }
//}












////Задание 3
////Создайте класс «Заграничный паспорт». Вам необходимо
////хранить информацию о номере паспорта, ФИО владельца,
////дате выдачи и т.д. Предусмотреть механизмы для инициализации полей класса. Если значение для инициализации
////неверное, генерируйте исключение. 

//using System;

//class ForeignPassport
//{
//    public string PassportNumber { get; private set; }
//    public string FullName { get; private set; }
//    public DateTime IssueDate { get; private set; }
//    public DateTime ExpiryDate { get; private set; }

//    public ForeignPassport()
//    {
//        Console.WriteLine("Enter passport number (9 characters):");
//        string passportNumber = Console.ReadLine();

//        if (string.IsNullOrEmpty(passportNumber) || passportNumber.Length != 9)
//        {
//            throw new ArgumentException("Invalid passport number enter 9 characterss.");
//        }

//        Console.WriteLine("Enter full name:");
//        string fullName = Console.ReadLine();

//        if (string.IsNullOrEmpty(fullName))
//        {
//            throw new ArgumentException("Invalid full name");
//        }

//        Console.WriteLine("Enter issue date (yyyy-MM-dd):");
//        if (!DateTime.TryParse(Console.ReadLine(), out DateTime issueDate))
//        {
//            throw new ArgumentException("Invalid  use yyyy-MM-dd.");
//        }

//        Console.WriteLine("Enter expiry date (yyyy-MM-dd):");
//        if (!DateTime.TryParse(Console.ReadLine(), out DateTime expiryDate) || issueDate >= expiryDate)
//        {
//            throw new ArgumentException("Invalid enter everything correctly plz");
//        }

//        PassportNumber = passportNumber;
//        FullName = fullName;
//        IssueDate = issueDate;
//        ExpiryDate = expiryDate;
//    }
//}

//class Program
//{
//    static void Main()
//    {
//        try
//        {
//            ForeignPassport passport = new ForeignPassport();
//            Console.WriteLine("Passport created !!!");
//        }
//        catch (ArgumentException ex)
//        {
//            Console.WriteLine($"Error: {ex.Message}");
//        }
//    }
//}













////Задание 4
////Пользователь вводит в строку с клавиатуры логическое
////выражение. Например, 3>2 или 7<3. Программа должна
////посчитать результат введенного выражения и дать результат true или false. В строке могут быть только целые числа
////и операторы: <, >, <=, >=, ==, !=.Для обработки ошибок
////ввода используйте механизм исключений



//using System;

//class Program
//{
//    static void Main()
//    {
//        try
//        {
//            Console.Write("Enter a logical expression (e.g., 3 > 2): ");
//            string input = Console.ReadLine();

//            bool result = EvaluateLogicalExpression(input);
//            Console.WriteLine($"Result: {result}");
//        }
//        catch (ArgumentException ex)
//        {
//            Console.WriteLine($"Invalid input: {ex.Message}");
//        }
//        catch (Exception ex)
//        {
//            Console.WriteLine($"error occurred: {ex.Message}");
//        }
//    }

//    static bool EvaluateLogicalExpression(string input)
//    {
//        string[] operators = { "<", ">", "<=", ">=", "==", "!=" };
//        string[] tokens = input.Split(' ');

//        if (tokens.Length != 3)
//        {
//            throw new ArgumentException("Invalid use the format 'number operator number'.");
//        }

//        int leftOperand, rightOperand;
//        string op;

//        if (!int.TryParse(tokens[0], out leftOperand))
//        {
//            throw new ArgumentException("Invalid enter an integer.");
//        }

//        if (!int.TryParse(tokens[2], out rightOperand))
//        {
//            throw new ArgumentException("Invalid enter an integer.");
//        }

//        op = tokens[1];

//        switch (op)
//        {
//            case "<":
//                return leftOperand < rightOperand;
//            case ">":
//                return leftOperand > rightOperand;
//            case "<=":
//                return leftOperand <= rightOperand;
//            case ">=":
//                return leftOperand >= rightOperand;
//            case "==":
//                return leftOperand == rightOperand;
//            case "!=":
//                return leftOperand != rightOperand;
//            default:
//                throw new ArgumentException("Invalid . Supported operators are <, >, <=, >=, ==, and !=.");
//        }
//    }
//}
